// Generated from ./server/grammar/fand/FandLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class FandLexer extends Lexer {
	public static readonly AT = 1;
	public static readonly AS = 2;
	public static readonly THROUGH = 3;
	public static readonly IS = 4;
	public static readonly REGISTER = 5;
	public static readonly HAS = 6;
	public static readonly ENTRIES = 7;
	public static readonly REGISTER_IDENTIFIER = 8;
	public static readonly META_OP = 9;
	public static readonly EQUALS = 10;
	public static readonly ANY_NON_WHITESPACE = 11;
	public static readonly ID = 12;
	public static readonly NUMBER = 13;
	public static readonly HEX_NUMBER = 14;
	public static readonly LINESKIP = 15;
	public static readonly WS = 16;
	public static readonly PATH_CHARS = 17;
	public static readonly PATHMODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "PATHMODE",
	];

	public static readonly ruleNames: string[] = [
		"AT", "AS", "THROUGH", "IS", "REGISTER", "HAS", "ENTRIES", "REGISTER_IDENTIFIER", 
		"META_OP", "EQUALS", "ANY_NON_WHITESPACE", "ID", "NUMBER", "HEX_NUMBER", 
		"LINESKIP", "WS", "PATH_CHARS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'at'", "'as'", "'through'", "'is'", "'Register'", "'has'", 
		"'entries'", undefined, "'@'", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "AT", "AS", "THROUGH", "IS", "REGISTER", "HAS", "ENTRIES", 
		"REGISTER_IDENTIFIER", "META_OP", "EQUALS", "ANY_NON_WHITESPACE", "ID", 
		"NUMBER", "HEX_NUMBER", "LINESKIP", "WS", "PATH_CHARS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(FandLexer._LITERAL_NAMES, FandLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return FandLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(FandLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "FandLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return FandLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return FandLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return FandLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return FandLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13|\b\x01\b" +
		"\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t" +
		"\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04" +
		"\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12" +
		"\t\x12\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x07\r^\n\r\f\r\x0E" +
		"\ra\v\r\x03\x0E\x06\x0Ed\n\x0E\r\x0E\x0E\x0Ee\x03\x0F\x06\x0Fi\n\x0F\r" +
		"\x0F\x0E\x0Fj\x03\x10\x03\x10\x03\x10\x05\x10p\n\x10\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x12\x06\x12w\n\x12\r\x12\x0E\x12x\x03\x12\x03\x12\x02" +
		"\x02\x02\x13\x04\x02\x03\x06\x02\x04\b\x02\x05\n\x02\x06\f\x02\x07\x0E" +
		"\x02\b\x10\x02\t\x12\x02\n\x14\x02\v\x16\x02\f\x18\x02\r\x1A\x02\x0E\x1C" +
		"\x02\x0F\x1E\x02\x10 \x02\x11\"\x02\x12$\x02\x13\x04\x02\x03\n\x03\x02" +
		"CX\x05\x02\v\f\x0F\x0F\"\"\x05\x02C\\aac|\x07\x02))2;C\\aac|\x03\x022" +
		";\x05\x022;CHch\x04\x02\v\v\"\"\x05\x02\f\f\x0F\x0FBB\x02\x7F\x02\x04" +
		"\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x02\b\x03\x02\x02\x02\x02\n\x03" +
		"\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03" +
		"\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03" +
		"\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C\x03" +
		"\x02\x02\x02\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03\x02" +
		"\x02\x02\x03$\x03\x02\x02\x02\x04&\x03\x02\x02\x02\x06+\x03\x02\x02\x02" +
		"\b.\x03\x02\x02\x02\n8\x03\x02\x02\x02\f;\x03\x02\x02\x02\x0ED\x03\x02" +
		"\x02\x02\x10H\x03\x02\x02\x02\x12P\x03\x02\x02\x02\x14S\x03\x02\x02\x02" +
		"\x16U\x03\x02\x02\x02\x18Y\x03\x02\x02\x02\x1A[\x03\x02\x02\x02\x1Cc\x03" +
		"\x02\x02\x02\x1Eh\x03\x02\x02\x02 o\x03\x02\x02\x02\"q\x03\x02\x02\x02" +
		"$v\x03\x02\x02\x02&\'\x07c\x02\x02\'(\x07v\x02\x02()\x03\x02\x02\x02)" +
		"*\b\x02\x02\x02*\x05\x03\x02\x02\x02+,\x07c\x02\x02,-\x07u\x02\x02-\x07" +
		"\x03\x02\x02\x02./\x07v\x02\x02/0\x07j\x02\x0201\x07t\x02\x0212\x07q\x02" +
		"\x0223\x07w\x02\x0234\x07i\x02\x0245\x07j\x02\x0256\x03\x02\x02\x0267" +
		"\b\x04\x02\x027\t\x03\x02\x02\x0289\x07k\x02\x029:\x07u\x02\x02:\v\x03" +
		"\x02\x02\x02;<\x07T\x02\x02<=\x07g\x02\x02=>\x07i\x02\x02>?\x07k\x02\x02" +
		"?@\x07u\x02\x02@A\x07v\x02\x02AB\x07g\x02\x02BC\x07t\x02\x02C\r\x03\x02" +
		"\x02\x02DE\x07j\x02\x02EF\x07c\x02\x02FG\x07u\x02\x02G\x0F\x03\x02\x02" +
		"\x02HI\x07g\x02\x02IJ\x07p\x02\x02JK\x07v\x02\x02KL\x07t\x02\x02LM\x07" +
		"k\x02\x02MN\x07g\x02\x02NO\x07u\x02\x02O\x11\x03\x02\x02\x02PQ\x07&\x02" +
		"\x02QR\t\x02\x02\x02R\x13\x03\x02\x02\x02ST\x07B\x02\x02T\x15\x03\x02" +
		"\x02\x02UV\x07?\x02\x02VW\x03\x02\x02\x02WX\b\v\x02\x02X\x17\x03\x02\x02" +
		"\x02YZ\n\x03\x02\x02Z\x19\x03\x02\x02\x02[_\t\x04\x02\x02\\^\t\x05\x02" +
		"\x02]\\\x03\x02\x02\x02^a\x03\x02\x02\x02_]\x03\x02\x02\x02_`\x03\x02" +
		"\x02\x02`\x1B\x03\x02\x02\x02a_\x03\x02\x02\x02bd\t\x06\x02\x02cb\x03" +
		"\x02\x02\x02de\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02\x02f\x1D" +
		"\x03\x02\x02\x02gi\t\x07\x02\x02hg\x03\x02\x02\x02ij\x03\x02\x02\x02j" +
		"h\x03\x02\x02\x02jk\x03\x02\x02\x02k\x1F\x03\x02\x02\x02lp\x07\f\x02\x02" +
		"mn\x07\x0F\x02\x02np\x07\f\x02\x02ol\x03\x02\x02\x02om\x03\x02\x02\x02" +
		"p!\x03\x02\x02\x02qr\t\b\x02\x02rs\x03\x02\x02\x02st\b\x11\x03\x02t#\x03" +
		"\x02\x02\x02uw\n\t\x02\x02vu\x03\x02\x02\x02wx\x03\x02\x02\x02xv\x03\x02" +
		"\x02\x02xy\x03\x02\x02\x02yz\x03\x02\x02\x02z{\b\x12\x04\x02{%\x03\x02" +
		"\x02\x02\t\x02\x03_ejox\x05\x07\x03\x02\x02\x03\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FandLexer.__ATN) {
			FandLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(FandLexer._serializedATN));
		}

		return FandLexer.__ATN;
	}

}

