{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "leviathon",
	"foldingStartMarker": "^def [a-zA-Z_][a-zA-Z_'0-9]*",
	"foldingStopMarker": "^(endf|endfunction|enddef)$",
	"scopeName": "source.leviathon",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#number"
		},
		{
			"include": "#hex-number"
		},
		{
			"include": "#register"
		},
		{
			"include": "#import"
		},
		{
			"include": "#node-declaration"
		},
		{
			"include": "#node-call"
		},
		{
			"include": "#action-call"
		},
		{
			"include": "#relative-call"
		},
		{
			"include": "#raw-function-call"
		},
		{
			"include": "#directive"
		},
		{
			"include": "#segment-meta-multiple"
		},
		{
			"include": "#segment-meta"
		},
		{
			"include": "#control-flow-keywords"
		},
		{
			"include": "#other-keywords"
		},
		{
			"include": "#register-operation"
		}
	],
	"repository": {
		"control-flow-keywords": {
			"name": "keyword.control.flow.leviathon",
			"match": "\\b(if|elif|else|endif|endwith|reset|repeat|return|conclude|chance|elsec|elsechance|endc|endchance|endcwith|endchancewith)\\b"
		},
		"lineskip":{
			"name": "keyword.operator.leviathon",
			"match": "(;|\n)"
		},
		"import": {
			"name": "meta.import.leviathon",
			"match": "^(importlibrary|importactions) ([a-zA-Z_][a-zA-Z'_0-9]*) (as) ([a-zA-Z_][a-zA-Z'_0-9]*)$",
			"captures": {
				"1": { "name": "keyword.control.import.leviathon" },
				"2": { "name": "entity.name.class.leviathon" },
				"3": { "name": "keyword.control.import.leviathon" },
				"4": { "name": "entity.name.class.leviathon" }
			}
		},
		"comment": {
			"name": "comment.line.leviathon",
			"match": "\\/\\/.*"
		},
		"number": {
			"name": "constant.numeric.dec.leviathon",
			"match": "\\b([0-9]+)\\b"
		},
		"hex-number": {
			"name": "constant.numeric.hex.leviathon",
			"match": "\\b(0x[0-9a-fA-F]+)\\b"
		},
		"other-keywords": {
			"name": "keyword.other.leviathon",
			"match": "\\b(as|call|action|function|unsafe|register|self|def|endf|enddef|endfunction)\\b"
		},
		"operators": {
			"name": "keyword.operator.leviathon",
			"match": "(==|!=|>|<|>=|<=|\\+\\+|\\|-|\\[|\\]|\\(|\\)|>>|->|=>|\\*\\&|\\@|\\:|\\,)"
		},
		"register": {
			"name": "keyword.other.leviathon",
			"match": "\\B\\$[A-T]\\b"
		},
		"register-operation": {
			"match": "(\\[) *([a-zA-Z_][a-zA-Z'_0-9]*) *(\\+\\+|\\|-|<|>|<=|>=|==|!=) *(([0-9]+)|(0x[0-9a-fA-F]+))? *(\\])",
			"captures": {
				"1": { "name": "keyword.operator.leviathon" },
				"2": { "name": "variable.name.leviathon" },
				"3": { "name": "keyword.operator.leviathon" },
				"5": { "name": "constant.numeric.dec.leviathon" },
				"6": { "name": "constant.numeric.hex.leviathon" },
				"7": { "name": "keyword.operator.leviathon" }
			}
		},
		"node-declaration": {
			"name": "meta.function",
			"match": "^(def) ([a-zA-Z_][a-zA-Z'_0-9]*) *((@) *(([0-9]+)|(0x[0-9a-fA-F]+)))?",
			"captures": {
				"1": { "name": "keyword.other.leviathon" },
				"2": { "name": "entity.name.function.leviathon" },
				"3": { "name": "string.quoted.double.leviathon" }
			}
		},
		"node-alias": {
			"name": "meta.function",
			"match": ""
		},
		"node-call": {
			"name": "meta.function-call.leviathon",
			"match": "(>>) ?(([a-zA-Z_][a-zA-Z'_0-9]*)(\\.))*([a-zA-Z_][a-zA-Z'_0-9]*)",
			"captures": {
				"1": { "name": "entity.name.function.leviathon" },
				"3": { "name": "entity.name.class.leviathon" },
				"4": { "name": "keyword.operator.leviathon" },
				"5": { "name": "entity.name.function.leviathon" }
			}
		},
		"relative-call": {
			"name": "meta.function-call.leviathon",
			"match": "(\\.)([a-zA-Z_][a-zA-Z'_0-9]*)(\\()(((\\b[0-9]+\\b)|(\\b0x[0-9a-fA-F]+\\b)|([^\\)]+?))?((\\,) ((\\b[0-9]+\\b)|(\\b0x[0-9a-fA-F]+\\b)|([^\\)]+?)))?)?(\\))",
			"captures": {
				"1": { "name": "keyword.operator.leviathon" },
				"2": { "name": "entity.other.attribute-name.leviathon" },
				"3": { "name": "keyword.operator.leviathon" },
				"6": { "name": "constant.numeric.dec.leviathon" },
				"7": { "name": "constant.numeric.hex.leviathon" },
				"8": { "name": "constant.numeric.leviathon" },
				"10": { "name": "keyword.operator.leviathon" },
				"12": { "name": "constant.numeric.dec.leviathon" },
				"13": { "name": "constant.numeric.hex.leviathon" },
				"14": { "name": "constant.numeric.leviathon" },
				"15": { "name": "keyword.operator.leviathon" }
			}
		},
		"raw-function-call": {
			"name": "meta.function-call.leviathon",
			"match": "\\b((function)(\\#)([0-9a-fA-F]+))(\\()(((\\b[0-9]+\\b)|(\\b0x[0-9a-fA-F]+\\b)|([^\\)]+?))?((\\,) ((\\b[0-9]+\\b)|(\\b0x[0-9a-fA-F]+\\b)|([^\\)]+?)))?)?(\\))",
			"captures": {
				"1": { "name": "support.function.leviathon" },
				"5": { "name": "keyword.operator.leviathon" },
				"8": { "name": "constant.numeric.dec.leviathon" },
				"9": { "name": "constant.numeric.hex.leviathon" },
				"10": { "name": "constant.numeric.leviathon" },
				"11": { "name": "keyword.operator.leviathon" },
				"14": { "name": "constant.numeric.dec.leviathon" },
				"15": { "name": "constant.numeric.hex.leviathon" },
				"16": { "name": "constant.numeric.leviathon" },
				"17": { "name": "keyword.operator.leviathon" }
			}
		},
		"action-call": {
			"name": "meta.function-call.leviathon",
			"match": "(->) ?(([a-zA-Z_][a-zA-Z'_0-9]*)(\\.))*([a-zA-Z_][a-zA-Z'_0-9]*)",
			"captures": {
				"1": { "name": "entity.name.class.leviathon" },
				"3": { "name": "entity.name.class.leviathon" },
				"4": { "name": "keyword.operator.leviathon" },
				"5": { "name": "entity.name.function.leviathon" }
			}
		},
		"directive": {
			"name": "meta.selector",
			"match": "(=>) ?(return|reset|repeat|conclude)",
			"captures": {
				"1": { "name": "keyword.control.leviathon" },
				"2": { "name": "keyword.control.leviathon" }
			}
		},
		"segment-meta": {
			"name": "meta.type.annotation",
			"match": "(@) *?([a-zA-Z_][a-zA-Z'_0-9]*) (:) ((\\b[0-9]+\\b)|(\\b0x[0-9a-fA-F]+\\b))",
			"captures": {
				"1": { "name": "string.quoted.double.leviathon" },
				"2": { "name": "string.quoted.double.leviathon" },
				"3": { "name": "keyword.operator.leviathon" },
				"5": { "name": "string.quoted.double.leviathon" },
				"6": { "name": "string.quoted.double.leviathon" }
			}
		},
		"segment-meta-multiple": {
			"match": "(,) *?([a-zA-Z_][a-zA-Z'_0-9]*) (:) (([0-9]+)|(0x[0-9a-fA-F]+))",
			"captures": {
				"1": { "name": "keyword.operator.leviathon" },
				"2": { "name": "string.quoted.double.leviathon" },
				"3": { "name": "keyword.operator.leviathon" },
				"5": { "name": "string.quoted.double.leviathon" },
				"6": { "name": "string.quoted.double.leviathon" }
			}
		}
	}
}
